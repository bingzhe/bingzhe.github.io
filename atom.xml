<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>bingzhe</title>
  <icon>https://www.gravatar.com/avatar/6ec637520c1b2769c052b4d7220f0f17</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yoursite.com/"/>
  <updated>2019-08-22T06:32:26.966Z</updated>
  <id>https://yoursite.com/</id>
  
  <author>
    <name>bingzhe</name>
    <email>ranzhouli@foxmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git恢复误删文件</title>
    <link href="https://yoursite.com/2019/08/22/%E6%81%A2%E5%A4%8D%E8%AF%AF%E5%88%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://yoursite.com/2019/08/22/恢复误删文件/</id>
    <published>2019-08-22T06:23:40.000Z</published>
    <updated>2019-08-22T06:32:26.966Z</updated>
    
    <content type="html"><![CDATA[<p>Step 1：git status<br>Step 2：git reset HEAD [ 被删除的文件或文件夹 ]<br>Step 3：git checkout  [ 被删除的文件或文件夹 ]</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Step 1：git status&lt;br&gt;Step 2：git reset HEAD [ 被删除的文件或文件夹 ]&lt;br&gt;Step 3：git checkout  [ 被删除的文件或文件夹 ]&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="Git" scheme="https://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript中使用ESlint</title>
    <link href="https://yoursite.com/2019/04/29/TypeScript%E4%B8%AD%E4%BD%BF%E7%94%A8ESlint/"/>
    <id>https://yoursite.com/2019/04/29/TypeScript中使用ESlint/</id>
    <published>2019-04-29T12:22:29.000Z</published>
    <updated>2019-08-22T06:00:02.605Z</updated>
    
    <content type="html"><![CDATA[<p>TypeScript 已经不再维护 TSlint，转投 ESlint，所以代码检查也切到 ESlint。</p><a id="more"></a><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add eslint @typescript-eslint/parser @typescript-eslint/eslint-plugin --dev</span><br></pre></td></tr></table></figure><h2 id="添加-eslintrc-js-配置文件"><a href="#添加-eslintrc-js-配置文件" class="headerlink" title="添加.eslintrc.js 配置文件"></a>添加.eslintrc.js 配置文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  parser: <span class="string">"@typescript-eslint/parser"</span>, <span class="comment">// Specifies the ESLint parser</span></span><br><span class="line">  extends: [</span><br><span class="line">    <span class="comment">// 'plugin:react/recommended',  // Uses the recommended rules from @eslint-plugin-react</span></span><br><span class="line">    <span class="comment">// 'plugin:@typescript-eslint/recommended',  // Uses the recommended rules from @typescript-eslint/eslint-plugin</span></span><br><span class="line">  ],</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    ecmaVersion: <span class="number">2018</span>, <span class="comment">// Allows for the parsing of modern ECMAScript features</span></span><br><span class="line">    sourceType: <span class="string">"module"</span>, <span class="comment">// Allows for the use of imports</span></span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      <span class="comment">// 不允许 return 语句出现在 global 环境下</span></span><br><span class="line">      globalReturn: <span class="literal">false</span>,</span><br><span class="line">      <span class="comment">// 开启全局 script 模式</span></span><br><span class="line">      impliedStrict: <span class="literal">true</span>,</span><br><span class="line">      jsx: <span class="literal">true</span> <span class="comment">// Allows for the parsing of JSX</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  env: &#123;</span><br><span class="line">    browser: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    commonjs: <span class="literal">true</span>,</span><br><span class="line">    es6: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 以当前目录为根目录，不再向上查找 .eslintrc.js</span></span><br><span class="line">  root: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">//指定你所要使用的全局变量，true代表允许重写、false代表不允许重写</span></span><br><span class="line">  globals: &#123;</span><br><span class="line">    describe: <span class="literal">false</span>,</span><br><span class="line">    it: <span class="literal">false</span>,</span><br><span class="line">    expect: <span class="literal">false</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">//   定义规则</span></span><br><span class="line">  &#125;,</span><br><span class="line">  settings: &#123;</span><br><span class="line">    react: &#123;</span><br><span class="line">      version: <span class="string">"detect"</span> <span class="comment">// Tells eslint-plugin-react to automatically detect the version of React to use</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="启用保存时候自动修复（VScode）"><a href="#启用保存时候自动修复（VScode）" class="headerlink" title="启用保存时候自动修复（VScode）"></a>启用保存时候自动修复（VScode）</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"eslint.autoFixOnSave"</span>:  <span class="literal">true</span>,</span><br><span class="line"><span class="string">"eslint.validate"</span>:  [</span><br><span class="line">  <span class="string">"javascript"</span>,</span><br><span class="line">  <span class="string">"javascriptreact"</span>,</span><br><span class="line">  &#123;<span class="string">"language"</span>:  <span class="string">"typescript"</span>,  <span class="string">"autoFix"</span>:  <span class="literal">true</span>  &#125;,</span><br><span class="line">  &#123;<span class="string">"language"</span>:  <span class="string">"typescriptreact"</span>,  <span class="string">"autoFix"</span>:  <span class="literal">true</span>  &#125;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>如果无效的时候，检查下是否安装<code>eslint-plugin-html</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;TypeScript 已经不再维护 TSlint，转投 ESlint，所以代码检查也切到 ESlint。&lt;/p&gt;
    
    </summary>
    
      <category term="TypeScript" scheme="https://yoursite.com/categories/TypeScript/"/>
    
    
      <category term="eslint" scheme="https://yoursite.com/tags/eslint/"/>
    
      <category term="TypeScript" scheme="https://yoursite.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>ios9一些JavaScript兼容</title>
    <link href="https://yoursite.com/2018/12/26/ios9%E4%B8%80%E4%BA%9BJavaScript%E5%85%BC%E5%AE%B9/"/>
    <id>https://yoursite.com/2018/12/26/ios9一些JavaScript兼容/</id>
    <published>2018-12-26T06:26:49.000Z</published>
    <updated>2019-08-22T06:00:02.630Z</updated>
    
    <content type="html"><![CDATA[<p>ios9浏览器上一些坑。</p><ol><li>ios9不支持let</li><li>promise</li></ol><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装</span></span><br><span class="line">npm install --save @babel/polyfill es6-promise</span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">"@babel/polyfill"</span>;</span><br><span class="line"><span class="keyword">import</span> Es6Promise <span class="keyword">from</span> <span class="string">"es6-promise"</span>;</span><br><span class="line">Es6Promise.polyfill();</span><br></pre></td></tr></table></figure><ol start="3"><li>不支持URLSearchParams方法</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install --save url-search-params-polyfill</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"url-search-params-polyfill"</span>;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ios9浏览器上一些坑。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ios9不支持let&lt;/li&gt;
&lt;li&gt;promise&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="笔记" scheme="https://yoursite.com/categories/%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="笔记" scheme="https://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>koa(六) koa-multer上传文件</title>
    <link href="https://yoursite.com/2018/11/22/koa-%E5%85%AD-koa-multer%E4%B8%8A%E4%BC%A0%E6%96%87%E4%BB%B6/"/>
    <id>https://yoursite.com/2018/11/22/koa-六-koa-multer上传文件/</id>
    <published>2018-11-22T06:52:50.000Z</published>
    <updated>2019-08-22T06:00:02.644Z</updated>
    
    <content type="html"><![CDATA[<p>koa-multer是一个node.js中间件，用于处理<code>multipart/form-data</code>类型的表单数据，主要用于上传文件。</p><p><a href="https://www.npmjs.com/package/koa-multer" target="_blank" rel="noopener">koa-multer</a>是基于<a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">multer</a>这个模块。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install --save koa-multer</code></p><a id="more"></a><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multer = <span class="built_in">require</span>(<span class="string">'koa-multer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="string">'public/upload'</span>); <span class="comment">//配置图片上传的目录</span></span><br><span class="line">    &#125;,</span><br><span class="line">    filename: <span class="function"><span class="keyword">function</span> (<span class="params">req, file, cb</span>) </span>&#123;   <span class="comment">/*图片上传完成重命名*/</span></span><br><span class="line">        <span class="keyword">var</span> fileFormat = (file.originalname).split(<span class="string">"."</span>);</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="built_in">Date</span>.now() + <span class="string">"."</span> + fileFormat[fileFormat.length - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;);</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">'/upload'</span>, upload.single(<span class="string">'face'</span>), <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    ctx.body = &#123;</span><br><span class="line">    filename: ctx.req.file.filename,<span class="comment">//返回文件名</span></span><br><span class="line">    body:ctx.req.body</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;koa-multer是一个node.js中间件，用于处理&lt;code&gt;multipart/form-data&lt;/code&gt;类型的表单数据，主要用于上传文件。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.npmjs.com/package/koa-multer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;koa-multer&lt;/a&gt;是基于&lt;a href=&quot;https://github.com/expressjs/multer&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;multer&lt;/a&gt;这个模块。&lt;/p&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm install --save koa-multer&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="koa" scheme="https://yoursite.com/categories/koa/"/>
    
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
      <category term="koa" scheme="https://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>mongoDB数据库导出导入</title>
    <link href="https://yoursite.com/2018/11/17/mongoDB%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AF%BC%E5%87%BA%E5%AF%BC%E5%85%A5/"/>
    <id>https://yoursite.com/2018/11/17/mongoDB数据库导出导入/</id>
    <published>2018-11-17T10:09:48.000Z</published>
    <updated>2019-08-22T06:00:02.645Z</updated>
    
    <content type="html"><![CDATA[<hr><h2 id="mongoDB数据库导出-备份"><a href="#mongoDB数据库导出-备份" class="headerlink" title="mongoDB数据库导出/备份"></a>mongoDB数据库导出/备份</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">mongodump -h dbhost -d dbname -o dbdirectory</span><br><span class="line"><span class="comment">// eg</span></span><br><span class="line">mongodump -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -d koa_db -o C:\Users\Administrator\Desktop\koabase</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li>-h mongoDB所在服务器的地址，例如：127.0.0.1，或者指定端口号：127.0.0.1:27017</li><li>-d 需要导出的数据库，例如：koa_db</li><li>-o 备份的数据存放位置，例如：C:\Users\Administrator\Desktop\koabase</li></ol><a id="more"></a><h2 id="mongoDB数据库导入-恢复"><a href="#mongoDB数据库导入-恢复" class="headerlink" title="mongoDB数据库导入/恢复"></a>mongoDB数据库导入/恢复</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语法</span></span><br><span class="line">mongorestore -h dbhost -d dbname path</span><br><span class="line"><span class="comment">// eg</span></span><br><span class="line">mongorestore -h <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> -d koa_demo C:\Users\Administrator\Desktop\koabase\koa_db</span><br></pre></td></tr></table></figure><p>参数：</p><ol><li>-h mongoDB所在服务器的地址，例如：127.0.0.1，或者指定端口号：127.0.0.1:27017</li><li>-d 需要导导入的数据库，例如：koa_demo</li><li>path 备份的数据存放位置，例如：C:\Users\Administrator\Desktop\koabase</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;mongoDB数据库导出-备份&quot;&gt;&lt;a href=&quot;#mongoDB数据库导出-备份&quot; class=&quot;headerlink&quot; title=&quot;mongoDB数据库导出/备份&quot;&gt;&lt;/a&gt;mongoDB数据库导出/备份&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 语法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mongodump -h dbhost -d dbname -o dbdirectory&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// eg&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mongodump -h &lt;span class=&quot;number&quot;&gt;127.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.0&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;.1&lt;/span&gt; -d koa_db -o C:\Users\Administrator\Desktop\koabase&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-h mongoDB所在服务器的地址，例如：127.0.0.1，或者指定端口号：127.0.0.1:27017&lt;/li&gt;
&lt;li&gt;-d 需要导出的数据库，例如：koa_db&lt;/li&gt;
&lt;li&gt;-o 备份的数据存放位置，例如：C:\Users\Administrator\Desktop\koabase&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="mongoDB" scheme="https://yoursite.com/categories/mongoDB/"/>
    
    
      <category term="mongoDB" scheme="https://yoursite.com/tags/mongoDB/"/>
    
  </entry>
  
  <entry>
    <title>koa(五) svg-captcha 生成图片验证码</title>
    <link href="https://yoursite.com/2018/11/15/koa-%E4%BA%94-svg-captcha-%E7%94%9F%E6%88%90%E5%9B%BE%E7%89%87%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
    <id>https://yoursite.com/2018/11/15/koa-五-svg-captcha-生成图片验证码/</id>
    <published>2018-11-15T06:05:03.000Z</published>
    <updated>2019-08-22T06:00:02.641Z</updated>
    
    <content type="html"><![CDATA[<p>使用<code>svg-captcha</code>可以比较方便的生成图片验证码</p><ul><li><a href="https://github.com/lemonce/svg-captcha" target="_blank" rel="noopener">https://github.com/lemonce/svg-captcha</a></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>npm install --save svg-captcha</code></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> svgCaptcha = <span class="built_in">require</span>(<span class="string">'svg-captcha'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = svgCaptcha.create();</span><br><span class="line"><span class="built_in">console</span>.log(c);</span><br><span class="line"><span class="comment">// &#123;data: '&lt;svg.../svg&gt;', text: 'abcd'&#125;</span></span><br></pre></td></tr></table></figure><a id="more"></a><ol><li>生成普通验证码</li></ol><img src="/2018/11/15/koa-五-svg-captcha-生成图片验证码/code.png" title="普通验证码"><ol start="2"><li>生成算式验证码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> captcha = svgCaptcha.createMathExpr();</span><br></pre></td></tr></table></figure><img src="/2018/11/15/koa-五-svg-captcha-生成图片验证码/code1.png" title="算式验证码"><h2 id="options参数"><a href="#options参数" class="headerlink" title="options参数"></a>options参数</h2><ul><li>size: 4 // 验证码长度</li><li>ignoreChars: ‘0o1i’ // 验证码字符中排除 0o1i</li><li>noise: 1 // 干扰线条的数量</li><li>color: true // 验证码的字符是否有颜色，默认没有，如果设定了背景，则默认有</li><li>background: ‘#cc9966’ // 验证码图片背景颜色</li><li>fontSize: 50</li><li>width: 100</li><li>height:40</li></ul><h2 id="在koa中使用"><a href="#在koa中使用" class="headerlink" title="在koa中使用"></a>在koa中使用</h2><p>前端请求一个URL返回一个验证码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//验证码</span></span><br><span class="line">router.get(<span class="string">'/code'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> captcha = svgCaptcha.create(&#123;</span><br><span class="line">        size: <span class="number">4</span>,</span><br><span class="line">        fontSize: <span class="number">50</span>,</span><br><span class="line">        noise: <span class="number">3</span>,</span><br><span class="line">        width: <span class="number">120</span>,</span><br><span class="line">        height: <span class="number">34</span>,</span><br><span class="line">        background: <span class="string">"#cc9966"</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ctx.session.code = captcha.text;</span><br><span class="line">    <span class="comment">//设置响应头</span></span><br><span class="line">    ctx.response.type = <span class="string">"image/svg+xml"</span>;</span><br><span class="line">    ctx.body = captcha.data;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用&lt;code&gt;svg-captcha&lt;/code&gt;可以比较方便的生成图片验证码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/lemonce/svg-captcha&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/lemonce/svg-captcha&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h2&gt;&lt;p&gt;&lt;code&gt;npm install --save svg-captcha&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; svgCaptcha = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;svg-captcha&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; c = svgCaptcha.create();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(c);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// &amp;#123;data: &#39;&amp;lt;svg.../svg&amp;gt;&#39;, text: &#39;abcd&#39;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="koa" scheme="https://yoursite.com/categories/koa/"/>
    
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
      <category term="koa" scheme="https://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>koa(四) koa-session</title>
    <link href="https://yoursite.com/2018/11/13/koa-%E5%9B%9B-koa-session/"/>
    <id>https://yoursite.com/2018/11/13/koa-四-koa-session/</id>
    <published>2018-11-13T03:11:07.000Z</published>
    <updated>2019-08-22T06:00:02.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="session"><a href="#session" class="headerlink" title="session"></a>session</h2><p>session是另一种记录客户状态的机制，与Cookie的区别是Cookie保存在客户端浏览器中，而session保存在服务器上。</p><p>当浏览器访问服务器并发送第一次请求时，服务器端会创建一个 session 对象，生成一个类似于 key,value 的键值对， 然后将 key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带 key(cookie)，找到对应的 session(value)。客户的信息都保存<br>在 session 中。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install koa-session --save</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">'koa-session'</span>);</span><br><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.keys = [<span class="string">'some secret hurr'</span>];</span><br><span class="line"><span class="keyword">const</span> CONFIG = &#123;</span><br><span class="line">    key: <span class="string">'koa:sess'</span>, <span class="comment">//cookie key (default is koa:sess)</span></span><br><span class="line">    maxAge: <span class="number">86400000</span>, <span class="comment">// cookie 的过期时间 maxAge in ms (default is 1 days)</span></span><br><span class="line">    overwrite: <span class="literal">true</span>, <span class="comment">//是否可以 overwrite (默认 default true)</span></span><br><span class="line">    httpOnly: <span class="literal">true</span>, <span class="comment">//cookie 是否只有服务器端可以访问 httpOnly or not (default true)</span></span><br><span class="line">    signed: <span class="literal">true</span>, <span class="comment">//签名默认 true</span></span><br><span class="line">    rolling: <span class="literal">false</span>, <span class="comment">//在每次请求时强行设置 cookie，这将重置 cookie 过期时间（默认：false）</span></span><br><span class="line">    renew: <span class="literal">false</span>, <span class="comment">//(boolean) renew session when session is nearly expired,</span></span><br><span class="line">&#125;;</span><br><span class="line">app.use(session(CONFIG, app));</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ctx.session.username = <span class="string">"张三"</span>;  <span class="comment">//设置值 </span></span><br><span class="line">ctx.session.username           <span class="comment">//获取值</span></span><br></pre></td></tr></table></figure><h2 id="Cookie-和-和-Session-区别"><a href="#Cookie-和-和-Session-区别" class="headerlink" title="Cookie 和 和 Session  区别"></a>Cookie 和 和 Session  区别</h2><ol><li>cookie 数据存放在客户的浏览器上，session 数据放在服务器上。</li><li>cookie 不是很安全，别人可以分析存放在本地的 COOKIE 并进行 COOKIE 欺骗考虑到安全应当使用 session。</li><li>session 会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能考虑到减轻服务器性能方面，应当使用 COOKIE。</li><li>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个站点最多保存 20 个 cookie。</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;session&quot;&gt;&lt;a href=&quot;#session&quot; class=&quot;headerlink&quot; title=&quot;session&quot;&gt;&lt;/a&gt;session&lt;/h2&gt;&lt;p&gt;session是另一种记录客户状态的机制，与Cookie的区别是Cookie保存在客户端浏览器中，而session保存在服务器上。&lt;/p&gt;
&lt;p&gt;当浏览器访问服务器并发送第一次请求时，服务器端会创建一个 session 对象，生成一个类似于 key,value 的键值对， 然后将 key(cookie)返回到浏览器(客户)端，浏览器下次再访问时，携带 key(cookie)，找到对应的 session(value)。客户的信息都保存&lt;br&gt;在 session 中。&lt;/p&gt;
    
    </summary>
    
      <category term="koa" scheme="https://yoursite.com/categories/koa/"/>
    
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
      <category term="koa" scheme="https://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>koa(三) koa中Cookie中的使用</title>
    <link href="https://yoursite.com/2018/11/13/koa-%E4%B8%89-koa%E4%B8%ADcookie%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://yoursite.com/2018/11/13/koa-三-koa中cookie中的使用/</id>
    <published>2018-11-13T02:44:56.000Z</published>
    <updated>2019-08-22T06:00:02.637Z</updated>
    
    <content type="html"><![CDATA[<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><ul><li>koa中设置Cookie</li></ul><p><code>ctx.cookies.set(name, value, [options])</code></p><ul><li>koa中获取Cookie的值</li></ul><p><code>ctx.cookies.get(name)</code></p><a id="more"></a><h2 id="Options"><a href="#Options" class="headerlink" title="Options"></a>Options</h2><ul><li>domain</li></ul><p>cookie所在的域名</p><ul><li>path</li></ul><p>cookie所在的路径,默认’/‘</p><ul><li>maxAge</li></ul><p>有效时长</p><ul><li>expires</li></ul><p>失效时间</p><ul><li>secure</li></ul><p>安全cookie，默认false，设置为true时只有https可以访问</p><ul><li>httpOnly</li></ul><p>是否只是服务器可访问cookie, 默认true</p><ul><li>overwrite</li></ul><p>是否允许重写</p><h2 id="设置中文Cookie"><a href="#设置中文Cookie" class="headerlink" title="设置中文Cookie"></a>设置中文Cookie</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Buffer(<span class="string">'hello, world!'</span>).toString(<span class="string">'base64'</span>); <span class="comment">//转换成base64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Buffer(<span class="string">'aGVsbG8sIHdvcmxkIQ=='</span>, <span class="string">'base64'</span>).toString() <span class="comment">//还原base64</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;用法&quot;&gt;&lt;a href=&quot;#用法&quot; class=&quot;headerlink&quot; title=&quot;用法&quot;&gt;&lt;/a&gt;用法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;koa中设置Cookie&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ctx.cookies.set(name, value, [options])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;koa中获取Cookie的值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ctx.cookies.get(name)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="koa" scheme="https://yoursite.com/categories/koa/"/>
    
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
      <category term="koa" scheme="https://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>koa(二) koa-static</title>
    <link href="https://yoursite.com/2018/11/13/koa-%E4%BA%8C-koa-static/"/>
    <id>https://yoursite.com/2018/11/13/koa-二-koa-static/</id>
    <published>2018-11-13T02:17:10.000Z</published>
    <updated>2019-08-22T06:00:02.640Z</updated>
    
    <content type="html"><![CDATA[<p>koa静态资源中间件。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-<span class="keyword">static</span></span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="built_in">require</span>(<span class="string">'koa-static'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// app.use(static(root, opts));</span></span><br><span class="line"><span class="comment">// 配置路径可以配置多个</span></span><br><span class="line">app.use(<span class="keyword">static</span>(__dirname + <span class="string">'./www'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;koa静态资源中间件。&lt;/p&gt;
    
    </summary>
    
      <category term="koa" scheme="https://yoursite.com/categories/koa/"/>
    
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
      <category term="koa" scheme="https://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>koa(一) koa-bodyparser</title>
    <link href="https://yoursite.com/2018/11/12/koa-%E4%B8%80-koa-bodyparser/"/>
    <id>https://yoursite.com/2018/11/12/koa-一-koa-bodyparser/</id>
    <published>2018-11-12T10:39:50.000Z</published>
    <updated>2019-08-22T06:00:02.635Z</updated>
    
    <content type="html"><![CDATA[<p>koa中解析body的中间件，支持<code>json</code>,<code>form</code>,<code>text</code>,可以用来获取post提交的数据</p><h2 id="原生Node-js获取post提交的数据"><a href="#原生Node-js获取post提交的数据" class="headerlink" title="原生Node.js获取post提交的数据"></a>原生Node.js获取post提交的数据</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parsePostData</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> postdata = <span class="string">""</span>;</span><br><span class="line">            ctx.req.on(<span class="string">'data'</span>, data =&gt; &#123;</span><br><span class="line">                postdata += data;</span><br><span class="line">            &#125;);</span><br><span class="line">            ctx.req.on(<span class="string">'end'</span>, () =&gt; &#123;</span><br><span class="line">                resolve(postdata);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            reject(error);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save koa-bodyparser</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParse = <span class="built_in">require</span>(<span class="string">'koa-bodyparser'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa();</span><br><span class="line"></span><br><span class="line">app.use(bodyParse());</span><br><span class="line"></span><br><span class="line">app.use(<span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  <span class="comment">// the parsed body will store in ctx.request.body</span></span><br><span class="line">  <span class="comment">// if nothing was parsed, body will be an empty object &#123;&#125;</span></span><br><span class="line">  ctx.body = ctx.request.body;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://www.npmjs.com/package/koa-bodyparser" target="_blank" rel="noopener">文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;koa中解析body的中间件，支持&lt;code&gt;json&lt;/code&gt;,&lt;code&gt;form&lt;/code&gt;,&lt;code&gt;text&lt;/code&gt;,可以用来获取post提交的数据&lt;/p&gt;
&lt;h2 id=&quot;原生Node-js获取post提交的数据&quot;&gt;&lt;a href=&quot;#原生Node-js获取post提交的数据&quot; class=&quot;headerlink&quot; title=&quot;原生Node.js获取post提交的数据&quot;&gt;&lt;/a&gt;原生Node.js获取post提交的数据&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;parsePostData&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;ctx&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Promise&lt;/span&gt;(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;resolve, reject&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; postdata = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.req.on(&lt;span class=&quot;string&quot;&gt;&#39;data&#39;&lt;/span&gt;, data =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                postdata += data;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            ctx.req.on(&lt;span class=&quot;string&quot;&gt;&#39;end&#39;&lt;/span&gt;, () =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                resolve(postdata);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (error) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            reject(error);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="koa" scheme="https://yoursite.com/categories/koa/"/>
    
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
      <category term="koa" scheme="https://yoursite.com/tags/koa/"/>
    
  </entry>
  
  <entry>
    <title>封装操作mongoDB的CRUD操作类</title>
    <link href="https://yoursite.com/2018/08/12/%E5%B0%81%E8%A3%85%E6%93%8D%E4%BD%9CmongoDB%E7%9A%84CRUD%E6%93%8D%E4%BD%9C%E7%B1%BB/"/>
    <id>https://yoursite.com/2018/08/12/封装操作mongoDB的CRUD操作类/</id>
    <published>2018-08-12T07:33:37.000Z</published>
    <updated>2019-08-22T06:00:02.665Z</updated>
    
    <content type="html"><![CDATA[<p>建议使用更加成熟的node.js操作mongoDB库，例如 <a href="https://mongoosejs.com/" target="_blank" rel="noopener">mongoose</a> 等，本文指在学习交流。</p><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">module</span><br><span class="line">|--config.js  //数据库配置</span><br><span class="line">|--db.js      //操作类</span><br></pre></td></tr></table></figure><h2 id="config-js数据库配置"><a href="#config-js数据库配置" class="headerlink" title="config.js数据库配置"></a><code>config.js</code>数据库配置</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = &#123;</span><br><span class="line">    dbUrl: <span class="string">'mongodb://localhost:27017'</span>,</span><br><span class="line">    dbName: <span class="string">'koa'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = app;</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="db-js操作类"><a href="#db-js操作类" class="headerlink" title="db.js操作类"></a><code>db.js</code>操作类</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient;</span><br><span class="line"><span class="keyword">const</span> Config = <span class="built_in">require</span>(<span class="string">'./config.js'</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DB</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//单例模式</span></span><br><span class="line">    <span class="keyword">static</span> getInstance() &#123;</span><br><span class="line">        <span class="keyword">if</span> (!DB.instance) &#123;</span><br><span class="line">            DB.instance = <span class="keyword">new</span> DB();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> DB.instance;</span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造函数</span></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.dbClient = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.connect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//根据配置连接数据库</span></span><br><span class="line">    connect() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">this</span>.dbClient) &#123;</span><br><span class="line">                <span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(Config.dbUrl);</span><br><span class="line">                client.connect(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.dbClient = client.db(Config.dbName)</span><br><span class="line">                        resolve(<span class="keyword">this</span>.dbClient);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                resolve(<span class="keyword">this</span>.dbClient);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入数据</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; collectionName 表名</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; json 插入数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    insert(collectionName, json) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.connect().then(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">                db.collection(collectionName).insertOne(json, (err, result) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(result);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查找</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; collectionName 表名</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; json 查找条件</span></span><br><span class="line"><span class="comment">     */</span> </span><br><span class="line">    find(collectionName, json) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.connect().then(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> collection = db.collection(collectionName);</span><br><span class="line"></span><br><span class="line">                collection.find(json).toArray(<span class="function">(<span class="params">err, docs</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    resolve(docs);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; collectionName 表名</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; json1 查找条件</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; json2 更新的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    update(collectionName, json1, json2) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.connect().then(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">                db.collection(collectionName).updateOne(json1, &#123; <span class="attr">$set</span>: json2 &#125;, (err, result) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    resolve(result);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除</span></span><br><span class="line"><span class="comment">     * @param &#123;String&#125; collectionName 表名</span></span><br><span class="line"><span class="comment">     * @param &#123;*&#125; json 查找条件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    remove(collectionName, json) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.connect().then(<span class="function"><span class="params">db</span> =&gt;</span> &#123;</span><br><span class="line">                db.collection(collectionName).removeOne(json, (err, result) =&gt; &#123;</span><br><span class="line">                    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                        reject(err);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    resolve(result);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = DB.getInstance();</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>例如在<code>koa</code>中使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> koa = <span class="built_in">require</span>(<span class="string">'koa'</span>);</span><br><span class="line"><span class="keyword">const</span> router = <span class="built_in">require</span>(<span class="string">'koa-router'</span>)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DB = <span class="built_in">require</span>(<span class="string">"./module/db.js"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> koa();</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/add'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> DB.insert(<span class="string">'user'</span>, &#123; <span class="string">'username'</span>: <span class="string">"赵柳"</span>, <span class="string">'sex'</span>: <span class="string">'女'</span>, <span class="string">'age'</span>: <span class="number">29</span> &#125;);</span><br><span class="line">    ctx.body = <span class="string">"add"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/login'</span>, <span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = <span class="keyword">await</span> DB.find(<span class="string">'user'</span>, &#123;<span class="string">'username'</span>: <span class="string">'赵柳'</span>&#125;);</span><br><span class="line">    ctx.body = result;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/edit'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> DB.update(<span class="string">'user'</span>, &#123; <span class="string">'username'</span>: <span class="string">'赵柳'</span> &#125;, &#123; <span class="string">'age'</span>: <span class="number">32</span> &#125;);</span><br><span class="line">    ctx.body = <span class="string">"edit"</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/delete'</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> data = <span class="keyword">await</span> DB.remove(<span class="string">'user'</span>, &#123; <span class="string">'username'</span>: <span class="string">'赵柳'</span> &#125;);</span><br><span class="line">    ctx.body = <span class="string">"edit"</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;建议使用更加成熟的node.js操作mongoDB库，例如 &lt;a href=&quot;https://mongoosejs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mongoose&lt;/a&gt; 等，本文指在学习交流。&lt;/p&gt;
&lt;h2 id=&quot;文件目录&quot;&gt;&lt;a href=&quot;#文件目录&quot; class=&quot;headerlink&quot; title=&quot;文件目录&quot;&gt;&lt;/a&gt;文件目录&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--config.js  //数据库配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|--db.js      //操作类&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;config-js数据库配置&quot;&gt;&lt;a href=&quot;#config-js数据库配置&quot; class=&quot;headerlink&quot; title=&quot;config.js数据库配置&quot;&gt;&lt;/a&gt;&lt;code&gt;config.js&lt;/code&gt;数据库配置&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; app = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dbUrl: &lt;span class=&quot;string&quot;&gt;&#39;mongodb://localhost:27017&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    dbName: &lt;span class=&quot;string&quot;&gt;&#39;koa&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = app;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mongoDB" scheme="https://yoursite.com/categories/mongoDB/"/>
    
    
      <category term="mongoDB" scheme="https://yoursite.com/tags/mongoDB/"/>
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js连接mongoDB</title>
    <link href="https://yoursite.com/2018/08/12/Node-js%E8%BF%9E%E6%8E%A5MongoDB/"/>
    <id>https://yoursite.com/2018/08/12/Node-js连接MongoDB/</id>
    <published>2018-08-12T06:39:08.000Z</published>
    <updated>2019-08-22T06:00:02.603Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装mongodb"><a href="#安装mongodb" class="headerlink" title="安装mongodb"></a>安装mongodb</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongodb --save</span><br></pre></td></tr></table></figure><h2 id="连接MongoDB"><a href="#连接MongoDB" class="headerlink" title="连接MongoDB"></a>连接MongoDB</h2><p>需要已经安装并启动mongoDB服务,创建app.js,添加下列代码。使用<code>node app.js</code>运行。</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> MongoClient = <span class="built_in">require</span>(<span class="string">'mongodb'</span>).MongoClient;</span><br><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Connection URL</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="string">'mongodb://localhost:27017'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a new MongoClient</span></span><br><span class="line"><span class="keyword">const</span> client = <span class="keyword">new</span> MongoClient(url);</span><br><span class="line"></span><br><span class="line">client.connect(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">  assert.equal(<span class="literal">null</span>, err);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"Connected successfully to server"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> db = client.db(dbName);</span><br><span class="line"></span><br><span class="line">  client.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><a href="http://mongodb.github.io/node-mongodb-native/" target="_blank" rel="noopener">文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装mongodb&quot;&gt;&lt;a href=&quot;#安装mongodb&quot; class=&quot;headerlink&quot; title=&quot;安装mongodb&quot;&gt;&lt;/a&gt;安装mongodb&lt;/h2&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install mongodb --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;连接MongoDB&quot;&gt;&lt;a href=&quot;#连接MongoDB&quot; class=&quot;headerlink&quot; title=&quot;连接MongoDB&quot;&gt;&lt;/a&gt;连接MongoDB&lt;/h2&gt;&lt;p&gt;需要已经安装并启动mongoDB服务,创建app.js,添加下列代码。使用&lt;code&gt;node app.js&lt;/code&gt;运行。&lt;/p&gt;
    
    </summary>
    
      <category term="mongoDB" scheme="https://yoursite.com/categories/mongoDB/"/>
    
    
      <category term="mongoDB" scheme="https://yoursite.com/tags/mongoDB/"/>
    
      <category term="Node.js" scheme="https://yoursite.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>selinux开启和关闭</title>
    <link href="https://yoursite.com/2018/06/29/%E5%BC%80%E5%90%AF%E5%92%8C%E5%85%B3%E9%97%AD/"/>
    <id>https://yoursite.com/2018/06/29/开启和关闭/</id>
    <published>2018-06-29T08:23:08.000Z</published>
    <updated>2019-08-22T06:00:02.665Z</updated>
    
    <content type="html"><![CDATA[<p>SELinux 是一款为了提高系统安全性的软件，但会和很多服务冲突，可以选择关闭</p><ul><li>查看 SELinux 状态</li></ul><p><code># getenforce</code> Disabled 关闭，其他的都表示开启状态<br><code># sestatus -v</code> SELinux status: enabled/disabled</p><a id="more"></a><ul><li>关闭 SELinux</li></ul><ol><li><p>假设 SELinux 是正在运行的，我们可以使用setenforce 命令设置临时关闭，不用重启生效。</p><p> <code># setenforce 0</code></p></li><li><p>改变配置文件，需要重启生效</p><p> <code># vi /etc/selinux/config</code> 将SELINUX=enforcing改为SELINUX=disabled，保存重启即可</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SELinux 是一款为了提高系统安全性的软件，但会和很多服务冲突，可以选择关闭&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看 SELinux 状态&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;# getenforce&lt;/code&gt; Disabled 关闭，其他的都表示开启状态&lt;br&gt;&lt;code&gt;# sestatus -v&lt;/code&gt; SELinux status: enabled/disabled&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ESlint校验规则</title>
    <link href="https://yoursite.com/2017/09/27/eslint%E6%A0%A1%E9%AA%8C%E8%A7%84%E5%88%99/"/>
    <id>https://yoursite.com/2017/09/27/eslint校验规则/</id>
    <published>2017-09-27T15:21:45.000Z</published>
    <updated>2019-08-22T06:00:02.618Z</updated>
    
    <content type="html"><![CDATA[<h4 id="整理了一份eslint校验规则，以备查询"><a href="#整理了一份eslint校验规则，以备查询" class="headerlink" title="整理了一份eslint校验规则，以备查询"></a>整理了一份eslint校验规则，以备查询</h4><p><a href="https://github.com/bingzhe/Util/blob/master/.eslintrc.js" target="_blank" rel="noopener">规则</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;整理了一份eslint校验规则，以备查询&quot;&gt;&lt;a href=&quot;#整理了一份eslint校验规则，以备查询&quot; class=&quot;headerlink&quot; title=&quot;整理了一份eslint校验规则，以备查询&quot;&gt;&lt;/a&gt;整理了一份eslint校验规则，以备查询&lt;/h4&gt;&lt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://yoursite.com/tags/JavaScript/"/>
    
      <category term="eslint" scheme="https://yoursite.com/tags/eslint/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli的webpack模板项目文件配置学习</title>
    <link href="https://yoursite.com/2017/09/17/vue-cli%E7%9A%84webpack%E6%A8%A1%E6%9D%BF%E9%A1%B9%E7%9B%AE%E6%96%87%E4%BB%B6%E9%85%8D%E7%BD%AE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://yoursite.com/2017/09/17/vue-cli的webpack模板项目文件配置学习/</id>
    <published>2017-09-17T14:30:44.000Z</published>
    <updated>2019-08-22T06:00:02.651Z</updated>
    
    <content type="html"><![CDATA[<p>最近在用vue-cli生成的webpack模板做项目，开发过程中需要改动webpack配置，研究了一下配置文件，发现了一篇很好的博文<br><a href="http://blog.csdn.net/hongchh/article/details/55113751" target="_blank" rel="noopener">http://blog.csdn.net/hongchh/article/details/55113751</a><br>照个注释，自己也过了一遍。<br><a id="more"></a></p><h2 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h2><p>响应内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">├─build</span><br><span class="line">│   ├─build.js</span><br><span class="line">│   ├─check-versions.js</span><br><span class="line">│   ├─dev-client.js</span><br><span class="line">│   ├─dev-server.js</span><br><span class="line">│   ├─utils.js</span><br><span class="line">│   ├─vue-loader.conf.js</span><br><span class="line">│   ├─webpack.base.conf.js</span><br><span class="line">│   ├─webpack.dev.conf.js</span><br><span class="line">│   ├─webpack.prod.conf.js</span><br><span class="line">│   └─webpack.test.conf.js</span><br><span class="line">├─config</span><br><span class="line">│   ├─dev.env.js</span><br><span class="line">│   ├─index.js</span><br><span class="line">│   ├─prod.env.js</span><br><span class="line">│   └─test.env.js</span><br><span class="line">├─...</span><br><span class="line">└─package.json</span><br></pre></td></tr></table></figure><h2 id="build-dev-server-js"><a href="#build-dev-server-js" class="headerlink" title="build/dev-server.js"></a>build/dev-server.js</h2><p>首先来看执行”npm run dev”时候最先执行的build/dev-server.js文件。该文件主要完成下面几件事情：</p><ul><li>检查node和npm的版本、引入相关插件和配置</li><li>webpack对源码进行编译打包并返回compiler对象</li><li>创建express服务器</li><li>配置开发中间件（webpack-dev-middleware）和热重载中间件（webpack-hot-middleware）</li><li>挂载代理服务和中间件</li><li>配置静态资源</li><li>启动服务器监听特定端口（8080）</li><li>自动打开浏览器并打开特定网址（localhost:8080）</li></ul><p>代码注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查nodeJs和npm的版本</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取基本配置</span></span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果node的环境变量中没有设置当前的环境（NODE_ENV）,则使用config中的dev环境配置作为当前的环境 </span></span><br><span class="line"><span class="keyword">if</span> (!process.env.NODE_ENV) &#123;</span><br><span class="line">    process.env.NODE_ENV = <span class="built_in">JSON</span>.parse(config.dev.env.NODE_ENV)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//opn是一个可以调用默认的软件打开网址，图片，文件等内容的插件</span></span><br><span class="line"><span class="comment">//这里用它来调用默认的浏览器打开dev-server监听的端口 例如localhose:8080</span></span><br><span class="line"><span class="keyword">var</span> opn = <span class="built_in">require</span>(<span class="string">'opn'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//http-proxy-middleware是一个express中间件，用于将http请求代理到其他服务器</span></span><br><span class="line"><span class="comment">//例如: localhost:8080/api/xxx  --&gt; localhost:3000/api/xxx</span></span><br><span class="line"><span class="comment">//这里使用该插件可以将欠打un开发中涉及到的请求代理到提供服务的后台服务器上，方便与服务器对接</span></span><br><span class="line"><span class="keyword">var</span> proxyMiddleware = <span class="built_in">require</span>(<span class="string">'http-proxy-middleware'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//开发环境下的webpack 配置</span></span><br><span class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.dev.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//dev-server监听的端口，如果没有在命令行传入端口号，则使用config.dev.port设置的端口</span></span><br><span class="line"><span class="comment">// default port where dev server listens for incoming traffic</span></span><br><span class="line"><span class="keyword">var</span> port = process.env.PORT || config.dev.port</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于判断是否要自动打开浏览器的布尔变量，没有设置的时候默认为false</span></span><br><span class="line"><span class="comment">// automatically open browser, if not set will be false</span></span><br><span class="line"><span class="keyword">var</span> autoOpenBrowser = !!config.dev.autoOpenBrowser</span><br><span class="line"></span><br><span class="line"><span class="comment">//HTTP代理表，指定规则，将某些api请求代理到相应的服务器</span></span><br><span class="line"><span class="comment">// Define HTTP proxies to your custom API backend</span></span><br><span class="line"><span class="comment">// https://github.com/chimurai/http-proxy-middleware</span></span><br><span class="line"><span class="keyword">var</span> proxyTable = config.dev.proxyTable</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建express服务器</span></span><br><span class="line"><span class="keyword">var</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack 根据配置开始编译打包源码并且返回compiler对象</span></span><br><span class="line"><span class="keyword">var</span> compiler = webpack(webpackConfig)</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack-dev-middleware将webpack编译打包后得的产品文件存放在内存中而没有写入磁盘</span></span><br><span class="line"><span class="comment">//将这个中间件挂到express上使用之后即可提供这些编译后的产品服务</span></span><br><span class="line"><span class="keyword">var</span> devMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-dev-middleware'</span>)(compiler, &#123;</span><br><span class="line">    <span class="comment">//设置访问路径为webpack配置中的output对应的路径</span></span><br><span class="line">    publicPath: webpackConfig.output.publicPath,</span><br><span class="line">    <span class="comment">//设置为true使其不要在控制台输出日志</span></span><br><span class="line">    quiet: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack-hot-middleware 用于实现热重载功能的中间件</span></span><br><span class="line"><span class="keyword">var</span> hotMiddleware = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware'</span>)(compiler, &#123;</span><br><span class="line">    <span class="comment">//关闭控制台的日输出</span></span><br><span class="line">    log: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">//发送心跳包的频率</span></span><br><span class="line">    heartbeat: <span class="number">2000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//webpack重新编译打包完成后并将JS，CSS等文件inject到html文件之后，通过热重载中间件强制页面刷新</span></span><br><span class="line"><span class="comment">// force page reload when html-webpack-plugin template changes</span></span><br><span class="line">compiler.plugin(<span class="string">'compilation'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">compilation</span>) </span>&#123;</span><br><span class="line">    compilation.plugin(<span class="string">'html-webpack-plugin-after-emit'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data, cb</span>) </span>&#123;</span><br><span class="line">        hotMiddleware.publish(&#123; <span class="attr">action</span>: <span class="string">'reload'</span> &#125;)</span><br><span class="line">        cb()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据proxyTable中的代理请求配置来设置express服务器中的http代理规则</span></span><br><span class="line"><span class="comment">// proxy api requests</span></span><br><span class="line"><span class="built_in">Object</span>.keys(proxyTable).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> options = proxyTable[context]</span><br><span class="line">        <span class="comment">//格式化option,例如将www.example.com 变成&#123;target: 'www.example.com'&#125;</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> options === <span class="string">'string'</span>) &#123;</span><br><span class="line">        options = &#123; <span class="attr">target</span>: options &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    app.use(proxyMiddleware(options.filter || context, options))</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// handle fallback for HTML5 history API</span></span><br><span class="line"><span class="comment">// 重定向不存在的URL，用于支持SPA(单页面应用)</span></span><br><span class="line"><span class="comment">// 例如使用vue-router并且开启了history模式</span></span><br><span class="line">app.use(<span class="built_in">require</span>(<span class="string">'connect-history-api-fallback'</span>)())</span><br><span class="line"></span><br><span class="line"><span class="comment">// serve webpack bundle output</span></span><br><span class="line"><span class="comment">// 挂载webpack-dev-middleware中间件，提供webpack编译打包后的产品文件服务</span></span><br><span class="line">app.use(devMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// enable hot-reload and state-preserving</span></span><br><span class="line"><span class="comment">// compilation error display</span></span><br><span class="line"><span class="comment">// 挂载热重载中间件</span></span><br><span class="line">app.use(hotMiddleware)</span><br><span class="line"></span><br><span class="line"><span class="comment">// serve pure static assets</span></span><br><span class="line"><span class="comment">//提供static文件夹上的静态文件服务</span></span><br><span class="line"><span class="keyword">var</span> staticPath = path.posix.join(config.dev.assetsPublicPath, config.dev.assetsSubDirectory)</span><br><span class="line">app.use(staticPath, express.static(<span class="string">'./static'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">//访问链接</span></span><br><span class="line"><span class="keyword">var</span> uri = <span class="string">'http://localhost:'</span> + port</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建promise,在应用服务启动之后的resolve</span></span><br><span class="line"><span class="comment">//便于外部文件require了这个dev-server之后的代码编写</span></span><br><span class="line"><span class="keyword">var</span> _resolve</span><br><span class="line"><span class="keyword">var</span> readyPromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    _resolve = resolve</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'&gt; Starting dev server...'</span>)</span><br><span class="line">    <span class="comment">//webpack-dev-middleware等待webpack完成所有编译打包之后输出提示语到控制台，表明服务正式启动</span></span><br><span class="line">    <span class="comment">// 服务正式启动之后才自动打开浏览器进入页面</span></span><br><span class="line">devMiddleware.waitUntilValid(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'&gt; Listening at '</span> + uri + <span class="string">'\n'</span>)</span><br><span class="line">        <span class="comment">// when env is testing, don't need open it</span></span><br><span class="line">    <span class="keyword">if</span> (autoOpenBrowser &amp;&amp; process.env.NODE_ENV !== <span class="string">'testing'</span>) &#123;</span><br><span class="line">        opn(uri)</span><br><span class="line">    &#125;</span><br><span class="line">    _resolve()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动express服务器并监听响应的端口</span></span><br><span class="line"><span class="keyword">var</span> server = app.listen(port)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暴露本模块的功能给外部使用，例如下面的用法</span></span><br><span class="line"><span class="comment">// var devServer = require('./build/dev-seerver')</span></span><br><span class="line"><span class="comment">//devServer.ready.then(() =&gt; &#123;...&#125;)</span></span><br><span class="line"><span class="comment">//if(...)&#123;devServer.close()&#125;</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    ready: readyPromise,</span><br><span class="line">    close: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        server.close()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build-webpack-base-conf-js"><a href="#build-webpack-base-conf-js" class="headerlink" title="build/webpack.base.conf.js"></a>build/webpack.base.conf.js</h2><p>webpack.base.conf.js主要完成了下面这些事情：</p><ul><li>配置webpack编译入口</li><li>配置webpack输出路径和命名规则</li><li>配置模块resolve规则</li><li>配置不同类型模块的处理规则</li></ul><p>说明： 这个配置里面只配置了.js、.vue、图片、字体等几类文件的处理规则，如果需要处理其他文件可以在module.rules里面另行配置。</p><p>代码注释<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> vueLoaderConfig = <span class="built_in">require</span>(<span class="string">'./vue-loader.conf'</span>)</span><br><span class="line">    <span class="comment">// 在开头引入webpack，后面的plugins那里需要</span></span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">"webpack"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取绝对路径</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">'..'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">//webpack 入口文件</span></span><br><span class="line">    entry: &#123;</span><br><span class="line">        app: <span class="string">'./src/main.js'</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//webpack 输出路径和命名规则</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        <span class="comment">//webpack 输出的目标文件夹luj(例如：/dist)</span></span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        <span class="comment">//webpack 输出bundle文件命名格式</span></span><br><span class="line">        filename: <span class="string">'[name].js'</span>,</span><br><span class="line">        <span class="comment">//webpack 编译输出的发布路径</span></span><br><span class="line">        publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ?</span><br><span class="line">            config.build.assetsPublicPath : config.dev.assetsPublicPath</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//模块resolve的规则</span></span><br><span class="line">    resolve: &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.vue'</span>, <span class="string">'.json'</span>],</span><br><span class="line">        <span class="comment">//别名，方便引用模块</span></span><br><span class="line">        alias: &#123;</span><br><span class="line">            <span class="string">'vue$'</span>: <span class="string">'vue/dist/vue.esm.js'</span>,</span><br><span class="line">            <span class="string">'@'</span>: resolve(<span class="string">'src'</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//不同类型模块处理规则</span></span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [&#123;</span><br><span class="line">                <span class="comment">// 对所有.vue文件使用vue-loader进行编译</span></span><br><span class="line">                test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">                loader: <span class="string">'vue-loader'</span>,</span><br><span class="line">                options: vueLoaderConfig</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 对src和test文件夹下的.js文件使用babel-loader将es6+的代码转成es5</span></span><br><span class="line">                test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">                loader: <span class="string">'babel-loader'</span>,</span><br><span class="line">                include: [resolve(<span class="string">'src'</span>), resolve(<span class="string">'test'</span>)]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 对图片资源文件使用url-loader</span></span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 小于10K的图片转成base64编码的dataURL字符串写到代码中</span></span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    <span class="comment">// 其他的图片转移到静态资源文件夹</span></span><br><span class="line">                    name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 对多媒体资源文件使用url-loader</span></span><br><span class="line">                test: <span class="regexp">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 小于10K的资源转成base64编码的dataURL字符串写到代码中</span></span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    <span class="comment">// 其他的资源转移到静态资源文件夹</span></span><br><span class="line">                    name: utils.assetsPath(<span class="string">'media/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 对字体资源文件使用url-loader</span></span><br><span class="line">                test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</span><br><span class="line">                loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 小于10K的资源转成base64编码的dataURL字符串写到代码中</span></span><br><span class="line">                    limit: <span class="number">10000</span>,</span><br><span class="line">                    <span class="comment">// 其他的资源转移到静态资源文件夹</span></span><br><span class="line">                    name: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 增加一个plugins</span></span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.ProvidePlugin(&#123;</span><br><span class="line">            $: <span class="string">"jquery"</span>,</span><br><span class="line">            jQuery: <span class="string">"jquery"</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="build-webpack-dev-conf-js"><a href="#build-webpack-dev-conf-js" class="headerlink" title="build/webpack.dev.conf.js"></a>build/webpack.dev.conf.js</h2><p>接下来看webpack.dev.conf.js，这里面在webpack.base.conf的基础上增加完善了开发环境下面的配置，主要包括下面几件事情：</p><ul><li>将webpack的热重载客户端代码添加到每个entry对应的应用</li><li>合并基础的webpack配置</li><li>配置样式文件的处理规则，styleLoaders</li><li>配置Source Maps</li><li>配置webpack插件</li></ul><p>代码注释</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack-merge是一个可以合并数组和对象的插件</span></span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">var</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// html-webpack-plugin用于将webpack编译打包后的产品文件注入到html模板中</span></span><br><span class="line"><span class="comment">// 即自动在index.html里面加上&lt;link&gt;和&lt;script&gt;标签引用webpack打包后的文件</span></span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// friendly-errors-webpack-plugin用于更友好地输出webpack的警告、错误等信息</span></span><br><span class="line"><span class="keyword">var</span> FriendlyErrorsPlugin = <span class="built_in">require</span>(<span class="string">'friendly-errors-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// add hot-reload related code to entry chunks</span></span><br><span class="line"><span class="comment">// 给每个入口页面(应用)加上dev-client，用于跟dev-server的热重载插件通信，实现热更新</span></span><br><span class="line"><span class="built_in">Object</span>.keys(baseWebpackConfig.entry).forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    baseWebpackConfig.entry[name] = [<span class="string">'./build/dev-client'</span>].concat(baseWebpackConfig.entry[name])</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = merge(baseWebpackConfig, &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        <span class="comment">// 样式文件的处理规则，对css/sass/scss等不同内容使用相应的styleLoaders</span></span><br><span class="line">        <span class="comment">// 由utils配置出各种类型的预处理语言所需要使用的loader，例如sass需要使用sass-loader</span></span><br><span class="line">        rules: utils.styleLoaders(&#123; <span class="attr">sourceMap</span>: config.dev.cssSourceMap &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// cheap-module-eval-source-map is faster for development</span></span><br><span class="line">    <span class="comment">// 使用这种source-map更快</span></span><br><span class="line">    devtool: <span class="string">'#cheap-module-eval-source-map'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: config.dev.env</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// https://github.com/glenjamin/webpack-hot-middleware#installation--usage</span></span><br><span class="line">        <span class="comment">// 开启webpack热更新功能</span></span><br><span class="line">        <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">        <span class="comment">// webpack编译过程中出错的时候跳过报错阶段，不会阻塞编译，在编译结束后报错</span></span><br><span class="line">        <span class="keyword">new</span> webpack.NoEmitOnErrorsPlugin(),</span><br><span class="line">        <span class="comment">// https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">        <span class="comment">// 自动将依赖注入html模板，并输出最终的html文件到目标文件夹</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: <span class="string">'index.html'</span>,</span><br><span class="line">            template: <span class="string">'index.html'</span>,</span><br><span class="line">            inject: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> FriendlyErrorsPlugin()</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="build-utils-js"><a href="#build-utils-js" class="headerlink" title="build/utils.js"></a>build/utils.js</h2><p>utils提供工具函数，包括生成处理各种样式语言的loader，获取资源文件存放路径的工具函数。 </p><ol><li>计算资源文件存放路径 </li><li>生成cssLoaders用于加载.vue文件中的样式 </li><li>生成styleLoaders用于加载不在.vue文件中的单独存在的样式文件</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// extract-text-webpack-plugin可以提取bundle中的特定文本，将提取后的文本单独存放到另外的文件</span></span><br><span class="line"><span class="comment">// 这里用来提取css样式</span></span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资源文件的存放路径</span></span><br><span class="line">exports.assetsPath = <span class="function"><span class="keyword">function</span>(<span class="params">_path</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> assetsSubDirectory = process.env.NODE_ENV === <span class="string">'production'</span> ?</span><br><span class="line">        config.build.assetsSubDirectory :</span><br><span class="line">        config.dev.assetsSubDirectory</span><br><span class="line">    <span class="keyword">return</span> path.posix.join(assetsSubDirectory, _path)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生成css、sass、scss等各种用来编写样式的语言所对应的loader配置</span></span><br><span class="line">exports.cssLoaders = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    options = options || &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cssLoader = &#123;</span><br><span class="line">        loader: <span class="string">'css-loader'</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">            minimize: process.env.NODE_ENV === <span class="string">'production'</span>,</span><br><span class="line">            sourceMap: options.sourceMap</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// generate loader string to be used with extract text plugin</span></span><br><span class="line">    <span class="comment">// 生成各种loader配置，并且配置了extract-text-pulgin</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">generateLoaders</span>(<span class="params">loader, loaderOptions</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 默认是css-loader</span></span><br><span class="line">        <span class="keyword">var</span> loaders = [cssLoader]</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果非css，则增加一个处理预编译语言的loader并设好相关配置属性</span></span><br><span class="line">        <span class="comment">// 例如generateLoaders('less')，这里就会push一个less-loader</span></span><br><span class="line">        <span class="comment">// less-loader先将less编译成css，然后再由css-loader去处理css</span></span><br><span class="line">        <span class="comment">// 其他sass、scss等语言也是一样的过程</span></span><br><span class="line">        <span class="keyword">if</span> (loader) &#123;</span><br><span class="line">            loaders.push(&#123;</span><br><span class="line">                loader: loader + <span class="string">'-loader'</span>,</span><br><span class="line">                options: <span class="built_in">Object</span>.assign(&#123;&#125;, loaderOptions, &#123;</span><br><span class="line">                    sourceMap: options.sourceMap</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Extract CSS when that option is specified</span></span><br><span class="line">        <span class="comment">// (which is the case during production build)</span></span><br><span class="line">        <span class="keyword">if</span> (options.extract) &#123;</span><br><span class="line">            <span class="comment">// 配置extract-text-plugin提取样式</span></span><br><span class="line">            <span class="keyword">return</span> ExtractTextPlugin.extract(&#123;</span><br><span class="line">                use: loaders,</span><br><span class="line">                fallback: <span class="string">'vue-style-loader'</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 无需提取样式则简单使用vue-style-loader配合各种样式loader去处理&lt;style&gt;里面的样式</span></span><br><span class="line">            <span class="keyword">return</span> [<span class="string">'vue-style-loader'</span>].concat(loaders)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// https://vue-loader.vuejs.org/en/configurations/extract-css.html</span></span><br><span class="line">    <span class="comment">// 得到各种不同处理样式的语言所对应的loader</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        css: generateLoaders(),</span><br><span class="line">        postcss: generateLoaders(),</span><br><span class="line">        less: generateLoaders(<span class="string">'less'</span>),</span><br><span class="line">        sass: generateLoaders(<span class="string">'sass'</span>, &#123; <span class="attr">indentedSyntax</span>: <span class="literal">true</span> &#125;),</span><br><span class="line">        scss: generateLoaders(<span class="string">'sass'</span>),</span><br><span class="line">        stylus: generateLoaders(<span class="string">'stylus'</span>),</span><br><span class="line">        styl: generateLoaders(<span class="string">'stylus'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generate loaders for standalone style files (outside of .vue)</span></span><br><span class="line"><span class="comment">// 生成处理单独的.css、.sass、.scss等样式文件的规则</span></span><br><span class="line">exports.styleLoaders = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> output = []</span><br><span class="line">    <span class="keyword">var</span> loaders = exports.cssLoaders(options)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> extension <span class="keyword">in</span> loaders) &#123;</span><br><span class="line">        <span class="keyword">var</span> loader = loaders[extension]</span><br><span class="line">        output.push(&#123;</span><br><span class="line">            test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'\\.'</span> + extension + <span class="string">'$'</span>),</span><br><span class="line">            use: loader</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build-vue-loader-conf-js"><a href="#build-vue-loader-conf-js" class="headerlink" title="build/vue-loader.conf.js"></a>build/vue-loader.conf.js</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> isProduction = process.env.NODE_ENV === <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 处理.vue文件中的样式</span></span><br><span class="line">    loaders: utils.cssLoaders(&#123;</span><br><span class="line">        <span class="comment">// 是否打开source-map</span></span><br><span class="line">        sourceMap: isProduction ?</span><br><span class="line">            config.build.productionSourceMap : config.dev.cssSourceMap,</span><br><span class="line">        <span class="comment">// 是否提取样式到单独的文件</span></span><br><span class="line">        extract: isProduction</span><br><span class="line">    &#125;),</span><br><span class="line">    transformToRequire: &#123;</span><br><span class="line">        video: <span class="string">'src'</span>,</span><br><span class="line">        source: <span class="string">'src'</span>,</span><br><span class="line">        img: <span class="string">'src'</span>,</span><br><span class="line">        image: <span class="string">'xlink:href'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="build-dev-client-js"><a href="#build-dev-client-js" class="headerlink" title="build/dev-client.js"></a>build/dev-client.js</h2><p>dev-client.js里面主要写了浏览器端代码，用于实现webpack的热更新。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="comment">// 实现浏览器端的EventSource，用于跟服务器双向通信</span></span><br><span class="line"><span class="comment">// webpack热重载客户端跟dev-server上的热重载插件之间需要进行双向通信</span></span><br><span class="line"><span class="comment">// 服务端webpack重新编译后，会向客户端推送信息，告诉客户端进行更新</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'eventsource-polyfill'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack热重载客户端</span></span><br><span class="line"><span class="keyword">var</span> hotClient = <span class="built_in">require</span>(<span class="string">'webpack-hot-middleware/client?noInfo=true&amp;reload=true'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 客户端收到更新动作，执行页面刷新</span></span><br><span class="line">hotClient.subscribe(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (event.action === <span class="string">'reload'</span>) &#123;</span><br><span class="line">        <span class="built_in">window</span>.location.reload()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="build-build-js"><a href="#build-build-js" class="headerlink" title="build/build.js"></a>build/build.js</h2><p>构建环境下的配置。执行”npm run build”的时候首先执行的是build/build.js文件，build.js主要完成下面几件事：</p><ol><li>loading动画</li><li>删除目标文件夹</li><li>执行webpack构建</li><li>输出信息<br>说明： webpack编译之后会输出到配置里面指定的目标文件夹；删除目标文件夹之后再创建是为了去除旧的内容，以免产生不可预测的影响。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查NodeJS和npm的版本</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./check-versions'</span>)()</span><br><span class="line"></span><br><span class="line">process.env.NODE_ENV = <span class="string">'production'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ora，一个可以在终端显示spinner的插件</span></span><br><span class="line"><span class="keyword">var</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// rm，用于删除文件或文件夹的插件</span></span><br><span class="line"><span class="keyword">var</span> rm = <span class="built_in">require</span>(<span class="string">'rimraf'</span>)</span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// chalk，用于在控制台输出带颜色字体的插件</span></span><br><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> webpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.prod.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> spinner = ora(<span class="string">'building for production...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开启loading动画</span></span><br><span class="line">spinner.start()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先将整个dist文件夹以及里面的内容删除，以免遗留旧的没用的文件</span></span><br><span class="line"><span class="comment">// 删除完成后才开始webpack构建打包</span></span><br><span class="line">rm(path.join(config.build.assetsRoot, config.build.assetsSubDirectory), err =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行webpack构建打包，完成之后在终端输出构建完成的相关信息或者输出报错信息并退出程序</span></span><br><span class="line">    webpack(webpackConfig, <span class="function"><span class="keyword">function</span>(<span class="params">err, stats</span>) </span>&#123;</span><br><span class="line">        spinner.stop()</span><br><span class="line">        <span class="keyword">if</span> (err) <span class="keyword">throw</span> err</span><br><span class="line">        process.stdout.write(stats.toString(&#123;</span><br><span class="line">            colors: <span class="literal">true</span>,</span><br><span class="line">            modules: <span class="literal">false</span>,</span><br><span class="line">            children: <span class="literal">false</span>,</span><br><span class="line">            chunks: <span class="literal">false</span>,</span><br><span class="line">            chunkModules: <span class="literal">false</span></span><br><span class="line">        &#125;) + <span class="string">'\n\n'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(chalk.cyan(<span class="string">'  Build complete.\n'</span>))</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.yellow(</span><br><span class="line">            <span class="string">'  Tip: built files are meant to be served over an HTTP server.\n'</span> +</span><br><span class="line">            <span class="string">'  Opening index.html over file:// won\'t work.\n'</span></span><br><span class="line">        ))</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="build-webpack-prod-conf-js"><a href="#build-webpack-prod-conf-js" class="headerlink" title="build/webpack.prod.conf.js"></a>build/webpack.prod.conf.js</h2><p>构建的时候用到的webpack配置来自webpack.prod.conf.js，该配置同样是在webpack.base.conf基础上的进一步完善。主要完成下面几件事情：</p><ol><li>合并基础的webpack配置</li><li>配置样式文件的处理规则，styleLoaders</li><li>配置webpack的输出</li><li>配置webpack插件</li><li>gzip模式下的webpack插件配置</li><li>webpack-bundle分析<br>说明： webpack插件里面多了压缩代码以及抽离css文件等插件。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</span><br><span class="line"><span class="keyword">var</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</span><br><span class="line"><span class="keyword">var</span> merge = <span class="built_in">require</span>(<span class="string">'webpack-merge'</span>)</span><br><span class="line"><span class="keyword">var</span> baseWebpackConfig = <span class="built_in">require</span>(<span class="string">'./webpack.base.conf'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// copy-webpack-plugin，用于将static中的静态文件复制到产品文件夹dist</span></span><br><span class="line"><span class="keyword">var</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">var</span> ExtractTextPlugin = <span class="built_in">require</span>(<span class="string">'extract-text-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// optimize-css-assets-webpack-plugin，用于优化和最小化css资源</span></span><br><span class="line"><span class="keyword">var</span> OptimizeCSSPlugin = <span class="built_in">require</span>(<span class="string">'optimize-css-assets-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> env = config.build.env</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> webpackConfig = merge(baseWebpackConfig, &#123;</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 样式文件的处理规则，对css/sass/scss等不同内容使用相应的styleLoaders</span></span><br><span class="line">        <span class="comment">// 由utils配置出各种类型的预处理语言所需要使用的loader，例如sass需要使用sass-loader</span></span><br><span class="line">        rules: utils.styleLoaders(&#123;</span><br><span class="line">            sourceMap: config.build.productionSourceMap,</span><br><span class="line">            extract: <span class="literal">true</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 是否使用source-map</span></span><br><span class="line">    devtool: config.build.productionSourceMap ? <span class="string">'#source-map'</span> : <span class="literal">false</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// webpack输出路径和命名规则</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: config.build.assetsRoot,</span><br><span class="line">        filename: utils.assetsPath(<span class="string">'js/[name].[chunkhash].js'</span>),</span><br><span class="line">        chunkFilename: utils.assetsPath(<span class="string">'js/[id].[chunkhash].js'</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="comment">// http://vuejs.github.io/vue-loader/en/workflow/production.html</span></span><br><span class="line">        <span class="keyword">new</span> webpack.DefinePlugin(&#123;</span><br><span class="line">            <span class="string">'process.env'</span>: env</span><br><span class="line">        &#125;),</span><br><span class="line"></span><br><span class="line">        <span class="comment">//压缩JS代码</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(&#123;</span><br><span class="line">            compress: &#123;</span><br><span class="line">                warnings: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            sourceMap: <span class="literal">true</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// extract css into its own file</span></span><br><span class="line">        <span class="comment">// 将css提取到单独的文件</span></span><br><span class="line">        <span class="keyword">new</span> ExtractTextPlugin(&#123;</span><br><span class="line">            filename: utils.assetsPath(<span class="string">'css/[name].[contenthash].css'</span>)</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// Compress extracted CSS. We are using this plugin so that possible</span></span><br><span class="line">        <span class="comment">// duplicated CSS from different components can be deduped.</span></span><br><span class="line">        <span class="comment">// 优化、最小化css代码，如果只简单使用extract-text-plugin可能会造成css重复</span></span><br><span class="line">        <span class="comment">// 具体原因可以看npm上面optimize-css-assets-webpack-plugin的介绍</span></span><br><span class="line">        <span class="keyword">new</span> OptimizeCSSPlugin(&#123;</span><br><span class="line">            cssProcessorOptions: &#123;</span><br><span class="line">                safe: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// generate dist index.html with correct asset hash for caching.</span></span><br><span class="line">        <span class="comment">// you can customize output by editing /index.html</span></span><br><span class="line">        <span class="comment">// see https://github.com/ampedandwired/html-webpack-plugin</span></span><br><span class="line">        <span class="comment">// 将产品文件的引用注入到index.html</span></span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            filename: config.build.index,</span><br><span class="line">            template: <span class="string">'index.html'</span>,</span><br><span class="line">            inject: <span class="literal">true</span>,</span><br><span class="line">            minify: &#123;</span><br><span class="line">                <span class="comment">// 删除index.html中的注释</span></span><br><span class="line">                removeComments: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 删除index.html中的空格</span></span><br><span class="line">                collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 删除各种html标签属性值的双引号</span></span><br><span class="line">                removeAttributeQuotes: <span class="literal">true</span></span><br><span class="line">                    <span class="comment">// more options:</span></span><br><span class="line">                    <span class="comment">// https://github.com/kangax/html-minifier#options-quick-reference</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// necessary to consistently work with multiple chunks via CommonsChunkPlugin</span></span><br><span class="line">            <span class="comment">// 注入依赖的时候按照依赖先后顺序进行注入，比如，需要先注入vendor.js，再注入app.js</span></span><br><span class="line">            chunksSortMode: <span class="string">'dependency'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// split vendor js into its own file</span></span><br><span class="line">        <span class="comment">// 将所有从node_modules中引入的js提取到vendor.js，即抽取库文件</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'vendor'</span>,</span><br><span class="line">            minChunks: <span class="function"><span class="keyword">function</span>(<span class="params">module, count</span>) </span>&#123;</span><br><span class="line">                <span class="comment">// any required modules inside node_modules are extracted to vendor</span></span><br><span class="line">                <span class="keyword">return</span> (</span><br><span class="line">                    <span class="built_in">module</span>.resource &amp;&amp;</span><br><span class="line">                    /\.js$/.test(<span class="built_in">module</span>.resource) &amp;&amp;</span><br><span class="line">                    <span class="built_in">module</span>.resource.indexOf(</span><br><span class="line">                        path.join(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">                    ) === <span class="number">0</span></span><br><span class="line">                )</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// extract webpack runtime and module manifest to its own file in order to</span></span><br><span class="line">        <span class="comment">// prevent vendor hash from being updated whenever app bundle is updated</span></span><br><span class="line">        <span class="keyword">new</span> webpack.optimize.CommonsChunkPlugin(&#123;</span><br><span class="line">            name: <span class="string">'manifest'</span>,</span><br><span class="line">            chunks: [<span class="string">'vendor'</span>]</span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="comment">// copy custom static assets</span></span><br><span class="line">        <span class="comment">// 将static文件夹里面的静态资源复制到dist/static</span></span><br><span class="line">        <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line">            <span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../static'</span>),</span><br><span class="line">            to: config.build.assetsSubDirectory,</span><br><span class="line">            ignore: [<span class="string">'.*'</span>]</span><br><span class="line">        &#125;])</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果开启了产品gzip压缩，则利用插件将构建后的产品文件进行压缩</span></span><br><span class="line"><span class="keyword">if</span> (config.build.productionGzip) &#123;</span><br><span class="line">    <span class="comment">// 一个用于压缩的webpack插件</span></span><br><span class="line">    <span class="keyword">var</span> CompressionWebpackPlugin = <span class="built_in">require</span>(<span class="string">'compression-webpack-plugin'</span>)</span><br><span class="line"></span><br><span class="line">    webpackConfig.plugins.push(</span><br><span class="line">        <span class="keyword">new</span> CompressionWebpackPlugin(&#123;</span><br><span class="line">            asset: <span class="string">'[path].gz[query]'</span>,</span><br><span class="line">            <span class="comment">// 压缩算法</span></span><br><span class="line">            algorithm: <span class="string">'gzip'</span>,</span><br><span class="line">            test: <span class="keyword">new</span> <span class="built_in">RegExp</span>(</span><br><span class="line">                <span class="string">'\\.('</span> +</span><br><span class="line">                config.build.productionGzipExtensions.join(<span class="string">'|'</span>) +</span><br><span class="line">                <span class="string">')$'</span></span><br><span class="line">            ),</span><br><span class="line">            threshold: <span class="number">10240</span>,</span><br><span class="line">            minRatio: <span class="number">0.8</span></span><br><span class="line">        &#125;)</span><br><span class="line">    )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果启动了report，则通过插件给出webpack构建打包后的产品文件分析报告</span></span><br><span class="line"><span class="keyword">if</span> (config.build.bundleAnalyzerReport) &#123;</span><br><span class="line">    <span class="keyword">var</span> BundleAnalyzerPlugin = <span class="built_in">require</span>(<span class="string">'webpack-bundle-analyzer'</span>).BundleAnalyzerPlugin</span><br><span class="line">    webpackConfig.plugins.push(<span class="keyword">new</span> BundleAnalyzerPlugin())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = webpackConfig</span><br></pre></td></tr></table></figure><h2 id="build-check-versions-js"><a href="#build-check-versions-js" class="headerlink" title="build/check-versions.js"></a>build/check-versions.js</h2><p>完成对node和npm的版本检测</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// chalk, 用于在控制台输出带颜色字体的插件</span></span><br><span class="line"><span class="keyword">var</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// semver, 语义化版本检查插件（The semantic version parser used by npm）</span></span><br><span class="line"><span class="keyword">var</span> semver = <span class="built_in">require</span>(<span class="string">'semver'</span>)</span><br><span class="line"><span class="keyword">var</span> packageConfig = <span class="built_in">require</span>(<span class="string">'../package.json'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// shelljs, 执行Unix命令行的插件</span></span><br><span class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开辟子进程执行指令cmd并返回结果</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exec</span>(<span class="params">cmd</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">require</span>(<span class="string">'child_process'</span>).execSync(cmd).toString().trim()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// node和npm版本需求</span></span><br><span class="line"><span class="keyword">var</span> versionRequirements = [&#123;</span><br><span class="line">    name: <span class="string">'node'</span>,</span><br><span class="line">    currentVersion: semver.clean(process.version),</span><br><span class="line">    versionRequirement: packageConfig.engines.node</span><br><span class="line">&#125;, ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (shell.which(<span class="string">'npm'</span>)) &#123;</span><br><span class="line">    versionRequirements.push(&#123;</span><br><span class="line">        name: <span class="string">'npm'</span>,</span><br><span class="line">        currentVersion: exec(<span class="string">'npm --version'</span>),</span><br><span class="line">        versionRequirement: packageConfig.engines.npm</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> warnings = []</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 依次判断版本是否符合要求</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; versionRequirements.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> mod = versionRequirements[i]</span><br><span class="line">        <span class="keyword">if</span> (!semver.satisfies(mod.currentVersion, mod.versionRequirement)) &#123;</span><br><span class="line">            warnings.push(mod.name + <span class="string">': '</span> +</span><br><span class="line">                chalk.red(mod.currentVersion) + <span class="string">' should be '</span> +</span><br><span class="line">                chalk.green(mod.versionRequirement)</span><br><span class="line">            )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果有警告则将其输出到控制台</span></span><br><span class="line">    <span class="keyword">if</span> (warnings.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">''</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(chalk.yellow(<span class="string">'To use this template, you must update following to modules:'</span>))</span><br><span class="line">        <span class="built_in">console</span>.log()</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; warnings.length; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> warning = warnings[i]</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'  '</span> + warning)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">console</span>.log()</span><br><span class="line">        process.exit(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="config-index-js"><a href="#config-index-js" class="headerlink" title="config/index.js"></a>config/index.js</h2><p>config文件夹下最主要的文件就是index.js了，在这里面描述了开发和构建两种环境下的配置，前面的build文件夹下也有不少文件引用了index.js里面的配置。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// see http://vuejs-templates.github.io/webpack for documentation.</span></span><br><span class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// var proxyConfig = require('./proxyConfig')</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="comment">// 构建产品时使用的配置</span></span><br><span class="line">    build: &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 环境变量</span></span><br><span class="line">        env: <span class="built_in">require</span>(<span class="string">'./prod.env'</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// html入口文件</span></span><br><span class="line">        index: path.resolve(__dirname, <span class="string">'../dist/index.html'</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 产品文件的存放路径</span></span><br><span class="line">        assetsRoot: path.resolve(__dirname, <span class="string">'../dist'</span>),</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 二级目录，存放静态资源文件的目录，位于dist文件夹下</span></span><br><span class="line">        assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发布路径，如果构建后的产品文件有用于发布CDN或者放到其他域名的服务器，可以在这里进行设置</span></span><br><span class="line">        <span class="comment">// 设置之后构建的产品文件在注入到index.html中的时候就会带上这里的发布路径</span></span><br><span class="line">        assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 是否使用source-map</span></span><br><span class="line">        productionSourceMap: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// Gzip off by default as many popular static hosts such as</span></span><br><span class="line">        <span class="comment">// Surge or Netlify already gzip all static assets for you.</span></span><br><span class="line">        <span class="comment">// Before setting to `true`, make sure to:</span></span><br><span class="line">        <span class="comment">// npm install --save-dev compression-webpack-plugin</span></span><br><span class="line">        <span class="comment">// 是否开启gzip压缩</span></span><br><span class="line">        productionGzip: <span class="literal">false</span>,</span><br><span class="line">        <span class="comment">// gzip模式下需要压缩的文件的扩展名，设置js、css之后就只会对js和css文件进行压缩</span></span><br><span class="line">        productionGzipExtensions: [<span class="string">'js'</span>, <span class="string">'css'</span>],</span><br><span class="line">        <span class="comment">// Run the build command with an extra argument to</span></span><br><span class="line">        <span class="comment">// View the bundle analyzer report after build finishes:</span></span><br><span class="line">        <span class="comment">// `npm run build --report`</span></span><br><span class="line">        <span class="comment">// Set to `true` or `false` to always turn it on or off</span></span><br><span class="line">        <span class="comment">// 是否展示webpack构建打包之后的分析报告</span></span><br><span class="line">        bundleAnalyzerReport: process.env.npm_config_report</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 开发过程中使用的配置</span></span><br><span class="line">    dev: &#123;</span><br><span class="line">        <span class="comment">// 环境变量</span></span><br><span class="line">        env: <span class="built_in">require</span>(<span class="string">'./dev.env'</span>),</span><br><span class="line">        <span class="comment">// dev-server监听的端口</span></span><br><span class="line">        port: <span class="number">8009</span>,</span><br><span class="line">        <span class="comment">// 是否自动打开浏览器</span></span><br><span class="line">        autoOpenBrowser: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 静态资源文件夹</span></span><br><span class="line">        assetsSubDirectory: <span class="string">'static'</span>,</span><br><span class="line">        <span class="comment">// 发布路径</span></span><br><span class="line">        assetsPublicPath: <span class="string">'/'</span>,</span><br><span class="line">        <span class="comment">// 代理配置表，在这里可以配置特定的请求代理到对应的API接口</span></span><br><span class="line">        <span class="comment">// 例如将'localhost:8080/api/xxx'代理到'www.example.com/api/xxx'</span></span><br><span class="line">        proxyTable: &#123;&#125;,</span><br><span class="line">        <span class="comment">// proxyTable: proxyConfig.proxyList,</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// CSS Sourcemaps off by default because relative paths are "buggy"</span></span><br><span class="line">        <span class="comment">// with this option, according to the CSS-Loader README</span></span><br><span class="line">        <span class="comment">// (https://github.com/webpack/css-loader#sourcemaps)</span></span><br><span class="line">        <span class="comment">// In our experience, they generally work as expected,</span></span><br><span class="line">        <span class="comment">// just be aware of this issue when enabling this option.</span></span><br><span class="line">        cssSourceMap: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置注释在github上放了一份<a href="https://github.com/bingzhe/Util/tree/master/vue-cli%20webpack%20config" target="_blank" rel="noopener">配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在用vue-cli生成的webpack模板做项目，开发过程中需要改动webpack配置，研究了一下配置文件，发现了一篇很好的博文&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/hongchh/article/details/55113751&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://blog.csdn.net/hongchh/article/details/55113751&lt;/a&gt;&lt;br&gt;照个注释，自己也过了一遍。&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://yoursite.com/tags/Vue/"/>
    
      <category term="webpack" scheme="https://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>JSON解析与序列化</title>
    <link href="https://yoursite.com/2017/09/09/JSON%E8%A7%A3%E6%9E%90%E4%B8%8E%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://yoursite.com/2017/09/09/JSON解析与序列化/</id>
    <published>2017-09-09T13:56:10.000Z</published>
    <updated>2019-08-22T06:00:02.602Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h2><p>JSON是JavaScript的一个严格的子集，利用JavaScript中的以小额模式来表示结构化数据,已经成为了互联网传输结构化数据的事实标准</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>JSON可以表示三种类型的值：</p><ul><li>简单值<br>使用与JavaScript相同的语法，可以在JSON中表示字符串，数值，布尔值和null。JSON不支持JavaScript中的特殊值</li><li>对象<br>复杂数据类型，表示一组无序的键值对</li><li>数组<br>复杂数据类型，表示一组有序的键值对</li></ul><a id="more"></a><h2 id="和JavaScript的一些区别，需要注意的地方"><a href="#和JavaScript的一些区别，需要注意的地方" class="headerlink" title="和JavaScript的一些区别，需要注意的地方"></a>和JavaScript的一些区别，需要注意的地方</h2><ol><li>JSON字符串必须使用双引号</li><li>JSON中对象的属性名任何时候都必须加上双引号</li></ol><h2 id="JSON解析"><a href="#JSON解析" class="headerlink" title="JSON解析"></a>JSON解析</h2><p>早起的JSON解析器基本上使用的是JavaScript的<code>eval()</code>函数。<br>ECMAScript 5对解析JSON的行为进行了规范，定义了全局对象JSON,JSON对象有两个方法：<code>stringify()</code>和<code>parse()</code>;<br>旧版本浏览可以使用这个<a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">shim</a></p><h3 id="JSON-stringify"><a href="#JSON-stringify" class="headerlink" title="JSON.stringify()"></a>JSON.stringify()</h3><p>用于把JavaScript对象序列化成为JSON字符串。</p><p>语法：<code>JSON.stringify(value[, replacer [, space]])</code><br><code>value</code>: 将要序列化成 一个JSON 字符串的值。<br><code>replacer</code>: 可选，过滤器，如果该参数是一个函数，则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理；如果该参数是一个数组，则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中；如果该参数为null或者未提供，则对象所有的属性都会被序列化。<br><code>space</code>: 可选， 指定缩进用的空白字符串，用于美化输出；如果参数是个数字，它代表有多少的空格；上限为10。该值若小于1，则意味着没有空格；如果该参数为字符串(字符串的前十个字母)，该字符串将被作为空格；如果该参数没有提供（或者为null）将没有空格。</p><h3 id="JSON-parse-用于"><a href="#JSON-parse-用于" class="headerlink" title="JSON.parse() 用于"></a><code>JSON.parse()</code> 用于</h3><p>解析一个JSON字符串，构造由字符串描述的JavaScript值或对象。<br>语法：<code>JSON.parse(text[, reviver])</code><br><code>text</code>：要被解析成JavaScript值的字符串。<br><code>reviver =</code>: 如果是一个函数，则规定了原始值如何被解析改造，在被返回之前。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JSON&quot;&gt;&lt;a href=&quot;#JSON&quot; class=&quot;headerlink&quot; title=&quot;JSON&quot;&gt;&lt;/a&gt;JSON&lt;/h2&gt;&lt;p&gt;JSON是JavaScript的一个严格的子集，利用JavaScript中的以小额模式来表示结构化数据,已经成为了互联网传输结构化数据的事实标准&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;&lt;a href=&quot;#语法&quot; class=&quot;headerlink&quot; title=&quot;语法&quot;&gt;&lt;/a&gt;语法&lt;/h2&gt;&lt;p&gt;JSON可以表示三种类型的值：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单值&lt;br&gt;使用与JavaScript相同的语法，可以在JSON中表示字符串，数值，布尔值和null。JSON不支持JavaScript中的特殊值&lt;/li&gt;
&lt;li&gt;对象&lt;br&gt;复杂数据类型，表示一组无序的键值对&lt;/li&gt;
&lt;li&gt;数组&lt;br&gt;复杂数据类型，表示一组有序的键值对&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://yoursite.com/tags/JavaScript/"/>
    
      <category term="JSON" scheme="https://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>Vuex数据本地储存</title>
    <link href="https://yoursite.com/2017/08/27/vuex%E6%95%B0%E6%8D%AE%E6%9C%AC%E5%9C%B0%E5%82%A8%E5%AD%98/"/>
    <id>https://yoursite.com/2017/08/27/vuex数据本地储存/</id>
    <published>2017-08-27T15:47:04.000Z</published>
    <updated>2019-08-22T06:00:02.652Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本逻辑"><a href="#基本逻辑" class="headerlink" title="基本逻辑"></a>基本逻辑</h2><p>vuex 是 vue 的数据管理插件，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，思路就是在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来在替换store里的state。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>localstore 存储</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//pageStore.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> ls = &#123;</span><br><span class="line">    <span class="comment">//本地存数据，days 有效时间（天）</span></span><br><span class="line">    setItem: <span class="function"><span class="keyword">function</span>(<span class="params">key, value, days</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> Days = Days || <span class="number">7</span>; <span class="comment">//有效时间默认7天</span></span><br><span class="line">        <span class="keyword">let</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">let</span> expires = exp.getTime() + Days * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line">        localStorage.setItem(key, <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            value,</span><br><span class="line">            expires</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    getItem: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> o = <span class="built_in">JSON</span>.parse(localStorage.getItem(key));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!o || o.expires &lt; <span class="built_in">Date</span>.now()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> o.value</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeItem: <span class="function"><span class="keyword">function</span>(<span class="params">key</span>) </span>&#123;</span><br><span class="line">        localStorage.removeItem(key)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>vuex 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ls &#125; <span class="keyword">from</span> <span class="string">'./pageStore'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> copy = <span class="built_in">Object</span>.create(<span class="built_in">Object</span>.getPrototypeOf(obj));</span><br><span class="line">    <span class="keyword">var</span> propNames = <span class="built_in">Object</span>.getOwnPropertyNames(obj);</span><br><span class="line"></span><br><span class="line">    propNames.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> desc = <span class="built_in">Object</span>.getOwnPropertyDescriptor(obj, name); <span class="comment">//获取指定对象的自身属性描述符</span></span><br><span class="line">        <span class="built_in">Object</span>.defineProperty(copy, name, desc);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> copy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> vuexToLocalStorage = <span class="function"><span class="params">store</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 当 store 初始化后调用</span></span><br><span class="line">    <span class="keyword">const</span> savedState = ls.getItem(<span class="string">'storeClone'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (savedState) &#123;</span><br><span class="line">        store.replaceState(savedState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    store.subscribe(<span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 每次 mutation 之后调用</span></span><br><span class="line">        <span class="comment">// mutation 的格式为 &#123; type, payload &#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> storeClone = copy(state);</span><br><span class="line">        ls.setItem(<span class="string">'vuex'</span>, storeClone);</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>store 引入后 使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    actions,</span><br><span class="line">    mutations,</span><br><span class="line">    plugins: [vuexToLocalStorage]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>本地测试过两份数据都是刷新之后数据还保存</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本逻辑&quot;&gt;&lt;a href=&quot;#基本逻辑&quot; class=&quot;headerlink&quot; title=&quot;基本逻辑&quot;&gt;&lt;/a&gt;基本逻辑&lt;/h2&gt;&lt;p&gt;vuex 是 vue 的数据管理插件，存储的数据是响应式的。但是并不会保存起来，刷新之后就回到了初始状态，思路就是在vuex里数据改变的时候把数据拷贝一份保存到localStorage里面，刷新之后，如果localStorage里有保存的数据，取出来在替换store里的state。&lt;/p&gt;
&lt;h2 id=&quot;实现&quot;&gt;&lt;a href=&quot;#实现&quot; class=&quot;headerlink&quot; title=&quot;实现&quot;&gt;&lt;/a&gt;实现&lt;/h2&gt;&lt;p&gt;localstore 存储&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://yoursite.com/tags/Vue/"/>
    
      <category term="Vuex" scheme="https://yoursite.com/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>window.name跨域</title>
    <link href="https://yoursite.com/2017/07/24/window-name%E8%B7%A8%E5%9F%9F/"/>
    <id>https://yoursite.com/2017/07/24/window-name跨域/</id>
    <published>2017-07-24T14:20:25.000Z</published>
    <updated>2019-08-22T06:00:02.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="window-name-基本原理"><a href="#window-name-基本原理" class="headerlink" title="window.name 基本原理"></a>window.name 基本原理</h2><p>当在浏览器中打开一个页面，或者在页面中添加一个iframe时即会创建一个对应的window对象，当页面加载另一个新的页面时，window的name属性是不会变的。这样就可以利用在页面动态添加一个iframe然后src加载数据页面，在数据页面将需要的数据赋值给window.name。然而此时承载iframe的parent页面还是不能直接访问，不在同一域下iframe的name属性，这时只需要将iframe再加载一个与承载页面同域的空白页面，即可对window.name进行数据读取</p><a id="more"></a><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>有三个页面：</p><ul><li>a.com/app.html：应用页面。</li><li>a.com/proxy.html：代理文件，一般是一个没有任何内容的html文件，需要和应用页面在同一域下。</li><li>b.com/data.html：应用页面需要获取数据的页面，可称为数据页面。</li></ul><p>步骤：</p><ul><li>在应用页面（a.com/app.html）中创建一个iframe，把其src指向数据页面（b.com/data.html）。数据页面会把数据附加到这个iframe的window.name上，data.html代码如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.name = <span class="string">'I was there!'</span>;    <span class="comment">// 这里是要传输的数据，大小一般为2M，IE和firefox下可以大至32M左右</span></span></span><br><span class="line"><span class="javascript">                                     <span class="comment">// 数据格式可以自定义，如json、字符串</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在应用页面（a.com/app.html）中监听iframe的onload事件，在此事件中设置这个iframe的src指向本地域的代理文件（代理文件和应用页面在同一域下，所以可以相互通信）。app.html部分代码如下：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> state = <span class="number">0</span>, </span></span><br><span class="line"><span class="javascript">    iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>),</span></span><br><span class="line"><span class="javascript">    loadfn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (state === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> data = iframe.contentWindow.name;    <span class="comment">// 读取数据</span></span></span><br><span class="line"><span class="javascript">            alert(data);    <span class="comment">//弹出'I was there!'</span></span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (state === <span class="number">0</span>) &#123;</span></span><br><span class="line">            state = 1;</span><br><span class="line"><span class="javascript">            iframe.contentWindow.location = <span class="string">"http://a.com/proxy.html"</span>;    <span class="comment">// 设置的代理文件</span></span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;;</span><br><span class="line"><span class="javascript">    iframe.src = <span class="string">'http://b.com/data.html'</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (iframe.attachEvent) &#123;</span></span><br><span class="line"><span class="javascript">        iframe.attachEvent(<span class="string">'onload'</span>, loadfn);</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">        iframe.onload  = loadfn;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(iframe);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>获取数据以后销毁这个iframe，释放内存；这也保证了安全（不被其他域frame js访问）。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="javascript">    iframe.contentWindow.document.write(<span class="string">''</span>);</span></span><br><span class="line">    iframe.contentWindow.close();</span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.removeChild(iframe);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;window-name-基本原理&quot;&gt;&lt;a href=&quot;#window-name-基本原理&quot; class=&quot;headerlink&quot; title=&quot;window.name 基本原理&quot;&gt;&lt;/a&gt;window.name 基本原理&lt;/h2&gt;&lt;p&gt;当在浏览器中打开一个页面，或者在页面中添加一个iframe时即会创建一个对应的window对象，当页面加载另一个新的页面时，window的name属性是不会变的。这样就可以利用在页面动态添加一个iframe然后src加载数据页面，在数据页面将需要的数据赋值给window.name。然而此时承载iframe的parent页面还是不能直接访问，不在同一域下iframe的name属性，这时只需要将iframe再加载一个与承载页面同域的空白页面，即可对window.name进行数据读取&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://yoursite.com/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>rem布局实现思路</title>
    <link href="https://yoursite.com/2017/07/05/rem%E5%B8%83%E5%B1%80%E5%AE%9E%E7%8E%B0%E6%80%9D%E8%B7%AF/"/>
    <id>https://yoursite.com/2017/07/05/rem布局实现思路/</id>
    <published>2017-07-05T10:57:05.000Z</published>
    <updated>2019-08-22T06:00:02.646Z</updated>
    
    <content type="html"><![CDATA[<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>css3 中引入了新的长度单位，rem。  官方定义 font size of the root element, rem是相对单位，是相对于根元素html的font-size进行计算。</p><h2 id="针对不同分辨率计算font-size"><a href="#针对不同分辨率计算font-size" class="headerlink" title="针对不同分辨率计算font-size"></a>针对不同分辨率计算font-size</h2><p>根据浏览器界面更改html的font-size</p><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">doc, win</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = doc.documentElement,</span><br><span class="line">        resizeEvt = <span class="string">'orientationchange'</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">'orientationchange'</span> : <span class="string">'resize'</span>,</span><br><span class="line">        recalc = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> clientWidth = docEl.clientWidth;</span><br><span class="line">            <span class="keyword">if</span> (!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">            docEl.style.fontSize = <span class="number">20</span> * (clientWidth / <span class="number">320</span>) + <span class="string">'px'</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    <span class="keyword">if</span> (!doc.addEventListener) <span class="keyword">return</span>;</span><br><span class="line">    win.addEventListener(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">    doc.addEventListener(<span class="string">'DOMContentLoaded'</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="built_in">document</span>, <span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><h2 id="配合css预处理工具sass可以计算-rem-值"><a href="#配合css预处理工具sass可以计算-rem-值" class="headerlink" title="配合css预处理工具sass可以计算 rem 值"></a>配合css预处理工具sass可以计算 rem 值</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//scss</span></span><br><span class="line">$hfs: <span class="number">16</span>px;   <span class="comment">//默认值可以更具需求来定义</span></span><br><span class="line"></span><br><span class="line">@<span class="function"><span class="keyword">function</span> <span class="title">pxTorem</span>(<span class="params">$px</span>)</span>&#123;<span class="comment">//$px为需要转换的字号</span></span><br><span class="line">    @<span class="keyword">return</span> $px / $hfs * <span class="number">1</span>rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">.class &#123;</span><br><span class="line">    font-size: pxTorem(<span class="number">12</span>px);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//css</span></span><br><span class="line">.class &#123;</span><br><span class="line">    font-size: <span class="number">0.75</span>rem;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;rem&quot;&gt;&lt;a href=&quot;#rem&quot; class=&quot;headerlink&quot; title=&quot;rem&quot;&gt;&lt;/a&gt;rem&lt;/h2&gt;&lt;p&gt;css3 中引入了新的长度单位，rem。  官方定义 font size of the root element, rem是相对单位，是相对于根元素html的font-size进行计算。&lt;/p&gt;
&lt;h2 id=&quot;针对不同分辨率计算font-size&quot;&gt;&lt;a href=&quot;#针对不同分辨率计算font-size&quot; class=&quot;headerlink&quot; title=&quot;针对不同分辨率计算font-size&quot;&gt;&lt;/a&gt;针对不同分辨率计算font-size&lt;/h2&gt;&lt;p&gt;根据浏览器界面更改html的font-size&lt;/p&gt;
    
    </summary>
    
      <category term="CSS" scheme="https://yoursite.com/categories/CSS/"/>
    
    
      <category term="rem" scheme="https://yoursite.com/tags/rem/"/>
    
      <category term="移动端布局" scheme="https://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue生命周期</title>
    <link href="https://yoursite.com/2017/06/25/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://yoursite.com/2017/06/25/vue生命周期/</id>
    <published>2017-06-25T14:45:52.000Z</published>
    <updated>2019-08-22T06:00:02.652Z</updated>
    
    <content type="html"><![CDATA[<p>看了vue好长时间了，总结下vue的生命周期，以备以后查询。</p><p>在Vue的整个生命周期中，它提供了一系列的事件，可以让我们注册js方法，可以让我们达到控制整个过程的目的地，在这些事件响应方法中的this直接指向的是vue的实例。</p><p>这是一张官网上的生命周期图<br><a id="more"></a><br><!--![生命周期](images/lifecycle.png)--><br><img src="/2017/06/25/vue生命周期/lifecycle.png" title="生命周期"></p><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><h4 id="beforeCreate"><a href="#beforeCreate" class="headerlink" title="beforeCreate"></a><code>beforeCreate</code></h4><p>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p><h4 id="created"><a href="#created" class="headerlink" title="created"></a><code>created</code></h4><p>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><h4 id="beforeMount"><a href="#beforeMount" class="headerlink" title="beforeMount"></a><code>beforeMount</code></h4><p>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><h4 id="mounted"><a href="#mounted" class="headerlink" title="mounted"></a><code>mounted</code></h4><p>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><h4 id="beforeUpdate"><a href="#beforeUpdate" class="headerlink" title="beforeUpdate"></a><code>beforeUpdate</code></h4><p>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><h4 id="updated"><a href="#updated" class="headerlink" title="updated"></a><code>updated</code></h4><p>数据更新后调用</p><h4 id="beforeDestroy"><a href="#beforeDestroy" class="headerlink" title="beforeDestroy"></a><code>beforeDestroy</code></h4><p>Vue 实例销毁前调用，可以应用在确认是否销毁</p><h4 id="destroyed"><a href="#destroyed" class="headerlink" title="destroyed"></a><code>destroyed</code></h4><p>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p><h4 id="activated"><a href="#activated" class="headerlink" title="activated"></a><code>activated</code></h4><p>keep-alive 组件激活时调用,该钩子在服务器端渲染期间不被调用。</p><h4 id="deactivated"><a href="#deactivated" class="headerlink" title="deactivated"></a><code>deactivated</code></h4><p>keep-alive 组件停用时调用,该钩子在服务器端渲染期间不被调用。</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; number &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"btnSetNumber"</span> <span class="attr">v-model</span>=<span class="string">"number"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">            el: <span class="string">'#app'</span>,</span></span><br><span class="line">            data: &#123;</span><br><span class="line">                number: 1</span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            beforeCreate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'beforeCreate 钩子执行..........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            created: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'created 钩子执行...........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            beforeMount: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'beforeMount 钩子执行...........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            mounted: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'mounted 钩子执行...........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'beforeUpdate 钩子执行..........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'updated 钩子执行...........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'beforeDestroy 钩子执行........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.$el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.$data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;,</span><br><span class="line"><span class="javascript">            destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'destroyed 钩子执行........................'</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'el:     '</span> + <span class="keyword">this</span>.el)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'data:   '</span> + <span class="keyword">this</span>.data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">'number:   '</span> + <span class="keyword">this</span>.number)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>create 和 mounted 相关</p><!--![](images/dayin.png)--><img src="/2017/06/25/vue生命周期/dayin.png"><p>update 相关</p><p>修改输入框数组<br><!--![](images/dayin1.png)--><br><img src="/2017/06/25/vue生命周期/dayin1.png"></p><p>destroy 相关</p><!--![](images/dayin2.png)--><img src="/2017/06/25/vue生命周期/dayin2.png"><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://cn.vuejs.org/v2/guide/instance.html#生命周期图示" target="_blank" rel="noopener">https://cn.vuejs.org/v2/guide/instance.html#生命周期图示</a></p><p><a href="https://cn.vuejs.org/v2/api/#deactivated" target="_blank" rel="noopener">https://cn.vuejs.org/v2/api/#deactivated</a></p><p><a href="https://segmentfault.com/a/1190000008010666" target="_blank" rel="noopener">https://segmentfault.com/a/1190000008010666</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;看了vue好长时间了，总结下vue的生命周期，以备以后查询。&lt;/p&gt;
&lt;p&gt;在Vue的整个生命周期中，它提供了一系列的事件，可以让我们注册js方法，可以让我们达到控制整个过程的目的地，在这些事件响应方法中的this直接指向的是vue的实例。&lt;/p&gt;
&lt;p&gt;这是一张官网上的生命周期图&lt;br&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://yoursite.com/categories/Vue/"/>
    
    
      <category term="Vue" scheme="https://yoursite.com/tags/Vue/"/>
    
  </entry>
  
</feed>
